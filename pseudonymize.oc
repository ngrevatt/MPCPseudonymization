#include <stdio.h>
#include <stdlib.h>
#include <obliv.oh>

#include "pseudonymize.h"
#include "dbg.h"

// #include the AES stuff -> how?
#include "oaes.h"
// I don't think I need gcrypt? (it was in Jack's test)



void dataToObliv(protocolIO *io, operson *oFullData, person *fullData, int party)
{
    uint8_t email[16];
    for(int i = 0;, i < io->numDataRecords; i++) {
        email = (uint8_t)atoi(fullData[i].email); // does this work?
        oFullData[i].email = feedOblivChar(email, party);
        // the other two parts are just coppied over
        oFullData[i].EUCitizenship = feedOblivChar(fullData[i].EUCitizenship, party);
        oFullData[i].income = feedOblivChar(fullData[i].income, party);
    }    
}

void pseudonymize_data(protocolIO * io, struct operson * fullData, obliv uint8_t key);

    int n = io->numDataRecords;
//  key = ; // ???? how do I generate this? (it definitely should not be hard coded)
    obliv uint8_t encryptedEmail[16];
    for (int i = 0; i < n; i++) {
        // iterate through both structs and split them into the two kinds of data
        // the values can be OvlivRevealed one by one as they are iteraged through
        // this is how they are saved (?)

        // populate nonidentifiable data
        revealOblivChar(&io->nonIdentifiableData[n].email, fullData[n].email, 1);
        revealOblivInt(&io->nonIdentifiableData[n].EUCitizenship, fullData[n].EUCitizenship, 1);

        // populate pseudonymized data
        // the emails should be encrypted for pseudonymized data
        oaes_128(encryptedEmail, key, fullData[i].email); // can I call this here? or does it need to be its own obliv? 
        // (Jack passed the key to one party and the input to another??)
        revealOblivChar(&io->pseudonymizedData[n].encryptedEmail, encryptedEmail, 1);
        revealOblivInt(&io->pseudonymizedData[n].income, fullData[n].income, 1);
        
    // and the pseudonymized array should be shuffled -> I would have to do this before revealing it line by line
    }
    //Reveal the encryption key to party 2
    revealOblivInt(&io->key, key, 2);
    

void pseudonymize(void * args)
{
    protocolIO *io = (protocolIO*) args;

    // used for loading the data
    struct person * fullData = malloc(sizeof(person) * io->numDataRecords);
    check_mem(fullData, ocCurrentParty());

    load_data(io, &fullData, ocCurrentParty());
//  check_input_count (not relevant for this operation, also not relevant for processing
    // because the set intersection does not assume full personal data remains?)

    // Results (to be sent back)
    // AES Encryption Key
    obliv uint8_t key[16];
    // where should the key be initialized? it should be randomized??

//  //struct operson oPseudonymizedData = malloc(sizeof(person) * io->numDataRecords)
//  //struct operson oNonIdentifiableData = malloc(sizeof(person) * io->numDataRecords)

    // like fullData, but with obliv fields (defined in pseudonymize.h, sent into the pseudonymize_data function)
    struct operson * oFullData = malloc(sizeof(operson) * io->numDataRecords)

    dataToObliv(io, oFullData, fullData, 1);
    free(fullData);

    pseudonymize_data(io, oFullData, key); // add oAESEncryptionKey
    free(oFullData);
    // should I free okey too?
}
